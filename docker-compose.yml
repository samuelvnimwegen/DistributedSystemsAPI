services:
  api:
    build: ./api
    ports:
      - "5000:5000"  # localhost:8000 → container:8000
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"  # localhost:5173 → container:5173
    depends_on:
      - api
    networks:
      - app-network
    volumes:
      - ./frontend:/app  # <-- bind mount your code
      - /app/node_modules  # <-- ignore host node_modules to avoid conflicts
    command: npm run dev
    working_dir: /app
    environment:
      - CHOKIDAR_USEPOLLING=true  # for hot reloading in Docker

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - frontend
      - api
    networks:
      - app-network

  db:
    image: postgres:17-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ds_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ds_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
        - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ds_user", "-d", "ds_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
